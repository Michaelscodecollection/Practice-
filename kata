

const hello = s =>
  `Hello, ${s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : 'World'}!`;
// so here we have our one liner
// we start of by creating our function using ES6 notation. we wrap the enture return in a 
// back tick. we write our Hello. this consolidates the code since both expected returns
//  contain a greeting. the response after hello is what differs. so we use a ternary
// operator from there. we use our dollar sign and curly braces so as to allow the return 
//  statement ot be at variable to whatever is recieved. if s is accounted for, meaning it exists
//  we grab the 0 index, capitalize it with our toUpperCase method/ using dot notation
// and we slice from the 1 index onward and we lowercase it. the result would be 'hello
// Name.' if there is no name meaning their is no input accounted for, we return a simple
// 'hello world.' main methods are toUpperCase- uppercases whatever this method is set and 
// attached to. slice- which  slice() selects the elements starting at the given start argument, 
// and ends at, but does not include, the given end argument. so we sliced from the 1 index onward and used toLowerCase to 
// allow for our return to meet basic grammer requirments. 
  
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  function roundIt(n){
  var [a, b] = n.toString().split('.');
  return a.length > b.length ? Math.floor(n) : a.length === b.length ? Math.round(n) : Math.ceil(n);
  return Math.Floor if n is true(true), if false test to see if a and b are equal(false but true), if true return Math.round if it is still false, return Math.ceil.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function solution(a, b) {
  return a.length < b.length ? a + b + a : b + a + b
}
// so frustatingly enough, this solution once again was way easier than I was making it out to be. here we used an effecient ternary operator. if a < b we return a + b + a : if
that is not the case, we use b + a + b. thats it. im not sure if a & b get split automatically in half. my first approach was to split the shorter one but you can only really do that with
an array and thats not what we started with, so trying to make that happen was going to over complicate it for sure,. 
function getDrinkByProfession(param) {
  param = param.toLowerCase();
  
  switch(param) {
    case "jabroni": return "Patron Tequila";
    case "school counselor": return "Anything with Alcohol";
    case "programmer": return "Hipster Craft Beer";
    case "bike gang member": return "Moonshine";
    case "politician": return  "Your tax dollars";
    case "rapper": return "Cristal";
    default: return "Beer";
  }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function checkExam(array1, array2) {
 // store points in variable (+=, -=)
  //we will need a for loop 
  // compare arrays. if array1[i] === array2[i] add 4
  // if array1[i] !== array2[i] subtract 1 
  // if no answer, add zero
  //if points < 0 return 0.
  //["a", "a", "b", "b"], ["a", "c", "b", "d"]
  let points = 0;
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  // here we create our for loop. now we know we are dealing with two arrays and we are comparing the both of them with one another. since we have the same length this will require
  one for loop. we will be comparing them side by side. if both answers are equal '===' we want score += 4. if the answer is incorrect we want score -= 1. if no answer is provided
  we want score += 0. 
  in our final return we want to check if score is < 0. if the final score is < 0, we will set the score = to 0 as you cannot have a negative score in this scenerio. 
  for (let i=0; i<array1.length; i++){
    if (array1[i] === array2[i]){
      points += 4;
    }else if (array2[i] === ''){
      points += 0;
    }else{
      points -= 1;
    }
  }
  return points < 0 ?  points = 0: points
  
 // if (points < 0){ 
   // points = 0;
 // }
  //return points
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const checkExam = (array1, array2) => {
  let result = array2.reduce(
//     reduce syntac calls for (previous value, current value, current index)
//     previous value in this case is the cumulative score. answer is the current value we are
//     // measuring. i stands for the current index. these are all in respect to array2.
    //if the answer of array2(the current value) == array1[i] score(previous value increases by 4)
    // score represents the cummulative result of the reduce method so far.(previous)
//     answer represents the current value being measures/compared. 
    //i represents the index value being measured. 
    (score, answer, i) => {
      if(answer == array1[i]) return score += 4;
      else if(answer == 0) return score += 0;
      else return score - 1;
    }
  , 0);
  return result < 0 ? 0 : result;
